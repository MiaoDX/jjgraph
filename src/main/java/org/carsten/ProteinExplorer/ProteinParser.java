/**
 * Copyright 1999-2016 Carsten Friedrich (Carsten.Friedrich@gmail.com)
 * Contributions by Falk Schreiber, Francois Bertault, Damian Merrick, and probably others
 * License: GNU GENERAL PUBLIC LICENSE 3.0 (https://www.gnu.org/copyleft/gpl.html)
 *
 */
/* Generated By:JavaCC: Do not edit this line. ProteinParser.java */
package org.carsten.ProteinExplorer;

import java.awt.Color;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.carsten.jjgraph.graph.JJEdge;
import org.carsten.jjgraph.graph.JJGraph;
import org.carsten.jjgraph.graph.JJGraphParser;
import org.carsten.jjgraph.graph.JJGraphWindow;
import org.carsten.jjgraph.graph.JJNode;
import org.carsten.jjgraph.graph.JJWindowList;
import org.carsten.jjgraph.util.Debug;

public class ProteinParser implements JJGraphParser, ProteinParserConstants {
	JJGraph graph;
	JJWindowList windows;
	Map<String, JJNode> nameToNode = new HashMap<>();
	Set<String> actionSet = new HashSet<>();
	Color blue = new Color(0, 0, 255);
	Color green = new Color(0, 255, 0);
	Color grey = new Color(220, 220, 220);

	@Override
	public boolean parse(final JJGraph g) {
		g.setDirected(false);
		Debug.println("Start parsing");

		graph = g;
		windows = graph.getWindows();
		Debug.println("Found " + windows.size() + " windows");

		nameToNode.clear();
		actionSet.clear();

		try {
			parse();
		} catch (final ParseException e) {
			Debug.println("Parse error: " + e.getMessage());

			windows.printError("Parse error: " + e.getMessage());
			return false;
		}
		Debug.println("Parsing finished successfully");

		for (final Object element : windows) {
			Debug.println("Adding inspector");

			final JJGraphWindow fenster = (JJGraphWindow) element;
			fenster.addTool(new JJProteinInspector(fenster, actionSet));
		}

		return true;
	}

	static String trimString(final String s) {
		// return s.substring(0,s.length() -1);
		return s;
	}

	// | < STRING: ( ["a"-"z","-","A"-"Z","_","0"-"9","."] )+ >
	final public void parse() throws ParseException {
		Debug.println("Parsing protein format");
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STRING:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			parseProteins();
		}
		jj_consume_token(0);
	}

	final public void parseProteins() throws ParseException {
		Token p1, p2;
		final StringBuffer action = new StringBuffer("");
		p1 = jj_consume_token(STRING);
		p2 = jj_consume_token(STRING);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STRING:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_2;
			}
			parseAction(action);
		}
		label_3: while (true) {
			jj_consume_token(NL);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NL:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_3;
			}
		}
		final String s1 = p1.image.trim();

		JJNode n1 = nameToNode.get(s1);
		if (n1 == null) {
			n1 = graph.addNode();
			n1.setName(s1);
			nameToNode.put(s1, n1);
			for (final Object element : windows) {
				final JJGraphWindow w = (JJGraphWindow) element;
				n1.getGraphicNode(w).setColor(grey);

			}

		}

		final String s2 = p2.image.trim();

		JJNode n2 = nameToNode.get(s2);
		if (n2 == null) {
			n2 = graph.addNode();
			n2.setName(s2);
			nameToNode.put(s2, n2);
			for (final Object element : windows) {
				final JJGraphWindow w = (JJGraphWindow) element;
				n2.getGraphicNode(w).setColor(grey);

			}
		}

		final JJEdge e = graph.addEdge(n1, n2);
		final String es = action.toString().trim();

		e.setName(es);
		actionSet.add(es);
		for (final Object element : windows) {
			final JJGraphWindow w = (JJGraphWindow) element;
			e.getGraphicEdge(w).setColor(blue);
		}

		Debug.println("Protein 1: " + s1 + ", Protein 2: " + s2 + " action: " + es);
	}

	final public void parseAction(final StringBuffer action) throws ParseException {
		Token t;
		t = jj_consume_token(STRING);
		action.append(t.image);
		// Debug.println("Parsing action: " + t.image);

	}

	public ProteinParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[3];
	final private int[] jj_la1_0 = { 0x10, 0x10, 0x8, };

	public ProteinParser(final java.io.InputStream stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ProteinParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	public ProteinParser(final java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ProteinParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	public ProteinParser(final ProteinParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final ProteinParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(final int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(final int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private final java.util.Vector<int[]> jj_expentries = new java.util.Vector<>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	final public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		final boolean[] la1tokens = new boolean[5];
		for (int i = 0; i < 5; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 3; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 5; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		final int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
