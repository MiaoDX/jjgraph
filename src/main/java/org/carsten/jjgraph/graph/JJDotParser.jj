/**
 * Copyright 1999-2016 Carsten Friedrich (Carsten.Friedrich@gmail.com)
 * Contributions by Falk Schreiber, Francois Bertault, Damian Merrick, and probably others
 * License: GNU GENERAL PUBLIC LICENSE 3.0 (https://www.gnu.org/copyleft/gpl.html)
 *
 */
options {
  STATIC = false;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN (JJDotParser)

package org.carsten.jjgraph.graph;

/**
 * JJDotParser.java
 *
 *
 * Created: Fri Feb 26 13:50:26 1999
 *
 * @author Carsten Friedrich
 * @version
 */

import java.io.*;
import java.util.*;
import java.awt.*;
import java.net.*;

import org.carsten.jjgraph.util.*;
import org.carsten.jjgraph.graph.*;

public class JJDotParser implements JJGraphParser
{
 HashMap nodeSerialMap = new HashMap();
 HashSet edgeSet= new HashSet();
 
 JJNode currentNode = null;
 JJEdge currentEdge = null;
 JJGraph graph;
 JJWindowList windows;

 public boolean parse(JJGraph g)
 {
  graph = g;
  windows = g.getWindows();
  
  currentNode = null;
  currentEdge = null;
  nodeSerialMap.clear();
  edgeSet.clear();
  edgeSet.addAll(graph.getEdges());
  
  for(Iterator iter=graph.nodeIterator();iter.hasNext();){
   JJNode tmpN = (JJNode) iter.next();
   nodeSerialMap.put(new Long(tmpN.getSerialNumber()), tmpN);
  }
  
  try {
   parse();
  }
  catch (ParseException e) {
   windows.printError("Parse error: " + e.getMessage());
   return false;
  }
  
  return true;
 }

 void setNodePos(JJGraphWindow fenster, JJGraphicNode gn, String pos)
 {
  String[] coords = pos.split(",");
  if(coords.length != 2){
   Debug.println("Illegal node coordinates: " + pos);
   return;
  }
  int x = Integer.parseInt(coords[0]);
  int y = Integer.parseInt(coords[1]);
  fenster.moveNodeTo(gn,x,y);
  
 }

 void setEdgePos(JJEdge edge, String pos)
 {
  for(Iterator iter = windows.iterator(); iter.hasNext();){
   JJGraphWindow window = (JJGraphWindow) iter.next();
   
   JJGraphicEdge ge = edge.getGraphicEdge(window);
   ge.removeBends();
   boolean addLast = true;
   if(edge.getSource().getGraphicNode(window).getY() <
      edge.getTarget().getGraphicNode(window).getY())
    addLast = false;
   
   String[] curves = pos.split(";");
   for(int i=0;i<curves.length;i++){
    String sp[] = curves[i].split(" ");
    for(int k=0;k<sp.length;k++){
     String coords []= sp[k].split(",");
     
     if(coords.length != 2){
      if(coords.length > 3){
       Debug.println("Illegal edge point coordinates: " + pos);
      }
      continue;
     }
     int x = Integer.parseInt(coords[0]);
     int y = Integer.parseInt(coords[1]);
     if(addLast)
      ge.addBendLast(new JJPoint(x,y));
     else
      ge.addBendFirst(new JJPoint(x,y));
     
     // fenster.moveNodeTo(gn,x,y);
    }
   }
   Debug.println("Removing tail points");
   Debug.println("Bends before: "+ge.getNumBends());
   ge.removeBendFirst();
   ge.removeBendLast();
   Debug.println("      after: "+ge.getNumBends());
  }
 }
 
 JJEdge findEdgeBetweenNodes(JJNode s, JJNode t)
 {
  for(Iterator iter= edgeSet.iterator(); iter.hasNext();){
   JJEdge tmpE = (JJEdge)iter.next();
   JJNode s1 = tmpE.getSource();
   JJNode t1 = tmpE.getTarget();
   if( ((s==s1)||(s==t1)) && ((t==s1)||(t==t1)))
    {
     try {
      iter.remove();
     } catch(UnsupportedOperationException e){
      edgeSet.remove(tmpE);
     }
     finally {
      return tmpE;
     }
    }
  }
  Debug.println("Couldn't find edge!");
  
  return graph.addEdge(s,t);
 }
 
 JJNode getNodeForId(long id)
 {
  Long ID = new Long(id);
  
  JJNode cn  = (JJNode) nodeSerialMap.get(ID);
  if(cn == null)   
   {
    cn = graph.addNode();
    cn.setValue((int)id);
    nodeSerialMap.put(ID, cn);
   }
  return cn;
 }
 
 static String trimString(String s)
 {
  return s.substring(1,s.length() -1);
 }
 
}

PARSER_END (JJDotParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
 < NUM: ( ("-")? ["0" - "9"] )+ >
 | < STRING: "\"" (~["\""] | "\\\"" )* "\"" >
 | < START_COMMENT: "[" >
 | < END_COMMENT: "]" >
 | < GRAPH: ("di")? "graph" >
 | < END: "}" >
 | < WORD: ["a"-"z","A"-"Z","_","."] ( ["a"-"z","A"-"Z","_","0"-"9","."] )* >
}

void parse() :
{
}
{
 {
  Debug.println("Parsing dot format");
 }
 <GRAPH> <WORD> "{" 
   (<WORD> comment() | <GRAPH> comment() | parseNodeOrEdge())* 
 <END>
 <EOF>
}

void parseNodeOrEdge(): 
{
 Token node1;
}
{
 node1=<NUM> (parseNode(node1) | parseEdge(node1))
}

void comment() :
{
}
{
 <START_COMMENT> (<WORD>"="<STRING> (",")? )* <END_COMMENT> ";"
   }

void nodeComment(JJNode node) :
{
}
{
 
 <START_COMMENT> (parseNodeInternal(node) (",")?)* <END_COMMENT> ";"
   }

void parseNodeInternal(JJNode node) :
{
 Token att, value;
}
{
 att = <WORD>"=" value = <STRING> 
  {
   Debug.println("Attribute: " + att.image+ ", value: " + value.image);
   if(att.image.equals("pos")){
    Debug.println("Setting node position");
    for(Iterator iter= windows.iterator();iter.hasNext();){
     JJGraphWindow window = (JJGraphWindow)iter.next();
     JJGraphicNode gn = node.getGraphicNode(window);
     setNodePos(window,gn, trimString(value.image));
    }
   }
  }
}


void edgeComment(JJNode s, JJNode t) :
{
 JJEdge tmpE = findEdgeBetweenNodes(s,t);
}
{
 <START_COMMENT> (parseEdgeInternal(tmpE) (",")? )* <END_COMMENT> ";"
   }

void parseEdgeInternal(JJEdge edge) :
{
 Token att, value;
}
{
 att = <WORD>"=" value = <STRING> 
  {
   Debug.println("Attribute: " + att.image+ ", value: " + value.image);
   if(att.image.equals("pos")){
    Debug.println("Setting edge position");
    setEdgePos(edge,trimString(value.image));
   }
  }
}

void parseEdge(Token source) :
{ Token target; }
{
 "->" target=<NUM> edgeComment(getNodeForId(Long.parseLong(source.image)),
                               getNodeForId(Long.parseLong(target.image)))
  {
   Debug.println("Found edge from " + source + " to " + target);
  }
 
}

void parseNode(Token id) : 
{
}
{
 nodeComment(getNodeForId(Long.parseLong(id.image)))
  {
   Debug.println("Found node " + id);
  }
}


void numberOrString() :
{
 Token t;
}
{
 t=<STRING>
  {
   // Debug.println("String: " + t.image);
  }
 |
 t=<NUM>
  {
   // Debug.println("Number: " + t.image);
  }
}
