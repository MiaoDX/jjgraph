/**
 * Copyright 1999-2016 Carsten Friedrich (Carsten.Friedrich@gmail.com)
 * Contributions by Falk Schreiber, Francois Bertault, Damian Merrick, and probably others
 * License: GNU GENERAL PUBLIC LICENSE 3.0 (https://www.gnu.org/copyleft/gpl.html)
 *
 */
/* Generated By:JavaCC: Do not edit this line. JJDotParser.java */
package org.carsten.jjgraph.graph;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import org.carsten.jjgraph.util.Debug;
import org.carsten.jjgraph.util.JJPoint;

public class JJDotParser implements JJGraphParser, JJDotParserConstants {
	HashMap<Long, JJNode> nodeSerialMap = new HashMap<>();
	HashSet<JJEdge> edgeSet = new HashSet<>();

	JJNode currentNode = null;
	JJEdge currentEdge = null;
	JJGraph graph;
	JJWindowList windows;

	@Override
	public boolean parse(final JJGraph g) {
		graph = g;
		windows = g.getWindows();

		currentNode = null;
		currentEdge = null;
		nodeSerialMap.clear();
		edgeSet.clear();
		edgeSet.addAll(graph.getEdges());

		for (final Iterator<JJNode> iter = graph.nodeIterator(); iter.hasNext();) {
			final JJNode tmpN = iter.next();
			nodeSerialMap.put(new Long(tmpN.getSerialNumber()), tmpN);
		}

		try {
			parse();
		} catch (final ParseException e) {
			windows.printError("Parse error: " + e.getMessage());
			return false;
		}

		return true;
	}

	void setNodePos(final JJGraphWindow fenster, final JJGraphicNode gn, final String pos) {
		final String[] coords = pos.split(",");
		if (coords.length != 2) {
			Debug.println("Illegal node coordinates: " + pos);
			return;
		}
		final int x = Integer.parseInt(coords[0]);
		final int y = Integer.parseInt(coords[1]);
		fenster.moveNodeTo(gn, x, y);

	}

	void setEdgePos(final JJEdge edge, final String pos) {
		for (final Object element : windows) {
			final JJGraphWindow window = (JJGraphWindow) element;

			final JJGraphicEdge ge = edge.getGraphicEdge(window);
			ge.removeBends();
			boolean addLast = true;
			if (edge.getSource().getGraphicNode(window).getY() < edge.getTarget().getGraphicNode(window).getY())
				addLast = false;

			final String[] curves = pos.split(";");
			for (final String curve : curves) {
				final String sp[] = curve.split(" ");
				for (final String element2 : sp) {
					final String coords[] = element2.split(",");

					if (coords.length != 2) {
						if (coords.length > 3) {
							Debug.println("Illegal edge point coordinates: " + pos);
						}
						continue;
					}
					final int x = Integer.parseInt(coords[0]);
					final int y = Integer.parseInt(coords[1]);
					if (addLast)
						ge.addBendLast(new JJPoint(x, y));
					else
						ge.addBendFirst(new JJPoint(x, y));

					// fenster.moveNodeTo(gn,x,y);
				}
			}
			Debug.println("Removing tail points");
			Debug.println("Bends before: " + ge.getNumBends());
			ge.removeBendFirst();
			ge.removeBendLast();
			Debug.println("      after: " + ge.getNumBends());
		}
	}

	JJEdge findEdgeBetweenNodes(final JJNode s, final JJNode t) {
		for (final Iterator<JJEdge> iter = edgeSet.iterator(); iter.hasNext();) {
			final JJEdge tmpE = iter.next();
			final JJNode s1 = tmpE.getSource();
			final JJNode t1 = tmpE.getTarget();
			if (((s == s1) || (s == t1)) && ((t == s1) || (t == t1))) {
				try {
					iter.remove();
				} catch (final UnsupportedOperationException e) {
					edgeSet.remove(tmpE);
				} finally {
				}
				return tmpE;
			}
		}
		Debug.println("Couldn't find edge!");

		return graph.addEdge(s, t);
	}

	JJNode getNodeForId(final long id) {
		final Long ID = new Long(id);

		JJNode cn = nodeSerialMap.get(ID);
		if (cn == null) {
			cn = graph.addNode();
			cn.setValue((int) id);
			nodeSerialMap.put(ID, cn);
		}
		return cn;
	}

	static String trimString(final String s) {
		return s.substring(1, s.length() - 1);
	}

	final public void parse() throws ParseException {
		Debug.println("Parsing dot format");
		jj_consume_token(GRAPH);
		jj_consume_token(WORD);
		jj_consume_token(12);
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NUM:
			case GRAPH:
			case WORD:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WORD:
				jj_consume_token(WORD);
				comment();
				break;
			case GRAPH:
				jj_consume_token(GRAPH);
				comment();
				break;
			case NUM:
				parseNodeOrEdge();
				break;
			default:
				jj_la1[1] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		jj_consume_token(END);
		jj_consume_token(0);
	}

	final public void parseNodeOrEdge() throws ParseException {
		Token node1;
		node1 = jj_consume_token(NUM);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case START_COMMENT:
			parseNode(node1);
			break;
		case 16:
			parseEdge(node1);
			break;
		default:
			jj_la1[2] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void comment() throws ParseException {
		jj_consume_token(START_COMMENT);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WORD:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_2;
			}
			jj_consume_token(WORD);
			jj_consume_token(13);
			jj_consume_token(STRING);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 14:
				jj_consume_token(14);
				break;
			default:
				jj_la1[4] = jj_gen;
				;
			}
		}
		jj_consume_token(END_COMMENT);
		jj_consume_token(15);
	}

	final public void nodeComment(final JJNode node) throws ParseException {
		jj_consume_token(START_COMMENT);
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WORD:
				;
				break;
			default:
				jj_la1[5] = jj_gen;
				break label_3;
			}
			parseNodeInternal(node);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 14:
				jj_consume_token(14);
				break;
			default:
				jj_la1[6] = jj_gen;
				;
			}
		}
		jj_consume_token(END_COMMENT);
		jj_consume_token(15);
	}

	final public void parseNodeInternal(final JJNode node) throws ParseException {
		Token att, value;
		att = jj_consume_token(WORD);
		jj_consume_token(13);
		value = jj_consume_token(STRING);
		Debug.println("Attribute: " + att.image + ", value: " + value.image);
		if (att.image.equals("pos")) {
			Debug.println("Setting node position");
			for (final Object element : windows) {
				final JJGraphWindow window = (JJGraphWindow) element;
				final JJGraphicNode gn = node.getGraphicNode(window);
				setNodePos(window, gn, trimString(value.image));
			}
		}
	}

	final public void edgeComment(final JJNode s, final JJNode t) throws ParseException {
		final JJEdge tmpE = findEdgeBetweenNodes(s, t);
		jj_consume_token(START_COMMENT);
		label_4: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WORD:
				;
				break;
			default:
				jj_la1[7] = jj_gen;
				break label_4;
			}
			parseEdgeInternal(tmpE);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 14:
				jj_consume_token(14);
				break;
			default:
				jj_la1[8] = jj_gen;
				;
			}
		}
		jj_consume_token(END_COMMENT);
		jj_consume_token(15);
	}

	final public void parseEdgeInternal(final JJEdge edge) throws ParseException {
		Token att, value;
		att = jj_consume_token(WORD);
		jj_consume_token(13);
		value = jj_consume_token(STRING);
		Debug.println("Attribute: " + att.image + ", value: " + value.image);
		if (att.image.equals("pos")) {
			Debug.println("Setting edge position");
			setEdgePos(edge, trimString(value.image));
		}
	}

	final public void parseEdge(final Token source) throws ParseException {
		Token target;
		jj_consume_token(16);
		target = jj_consume_token(NUM);
		edgeComment(getNodeForId(Long.parseLong(source.image)), getNodeForId(Long.parseLong(target.image)));
		Debug.println("Found edge from " + source + " to " + target);
	}

	final public void parseNode(final Token id) throws ParseException {
		nodeComment(getNodeForId(Long.parseLong(id.image)));
		Debug.println("Found node " + id);
	}

	final public void numberOrString() throws ParseException {
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case STRING:
			t = jj_consume_token(STRING);

			break;
		case NUM:
			t = jj_consume_token(NUM);

			break;
		default:
			jj_la1[9] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	public JJDotParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[10];
	final private int[] jj_la1_0 = { 0xa20, 0xa20, 0x10080, 0x800, 0x4000, 0x800, 0x4000, 0x800, 0x4000, 0x60, };

	public JJDotParser(final java.io.InputStream stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new JJDotParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	public JJDotParser(final java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new JJDotParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	public JJDotParser(final JJDotParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final JJDotParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 10; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(final int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(final int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private final java.util.Vector<int[]> jj_expentries = new java.util.Vector<>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	final public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		final boolean[] la1tokens = new boolean[17];
		for (int i = 0; i < 17; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 10; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 17; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		final int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
