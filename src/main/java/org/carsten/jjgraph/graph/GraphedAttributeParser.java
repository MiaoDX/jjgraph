/**
 * Copyright 1999-2016 Carsten Friedrich (Carsten.Friedrich@gmail.com)
 * Contributions by Falk Schreiber, Francois Bertault, Damian Merrick, and probably others
 * License: GNU GENERAL PUBLIC LICENSE 3.0 (https://www.gnu.org/copyleft/gpl.html)
 *
 */
/* Generated By:JavaCC: Do not edit this line. GraphedAttributeParser.java */
package org.carsten.jjgraph.graph;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Iterator;

import org.carsten.jjgraph.util.Debug;
import org.carsten.jjgraph.util.X11ColorConverter;

public class GraphedAttributeParser implements JJGraphParser, GraphedAttributeParserConstants {
	HashMap<Long, JJNode> nodeMap = new HashMap<>();
	// HashMap nodeSerialMap = new HashMap();
	JJNode currentNode = null;
	// JJEdge currentEdge = null;
	JJGraph graph;
	JJWindowList windows;

	@Override
	public boolean parse(final JJGraph g) {
		graph = g;
		windows = g.getWindows();

		currentNode = null;
		// currentEdge = null;
		nodeMap.clear();
		// nodeSerialMap.clear();
		for (final Iterator<JJNode> iter = graph.nodeIterator(); iter.hasNext();) {
			final JJNode tmpN = iter.next();
			// nodeSerialMap.put(new Long(tmpN.getSerialNumber()), tmpN);
			nodeMap.put(new Long(tmpN.getSerialNumber()), tmpN);
		}

		try {
			parse();
		} catch (final ParseException e) {
			windows.printError("Parse error: " + e.getMessage());
			return false;
		}

		return true;
	}

	JJNode getNodeForId(final long id) throws ParseException {
		final Long ID = new Long(id);

		final JJNode cn = nodeMap.get(ID);
		if (cn == null) {
			throw new ParseException("Couldn't find node with SN:" + id);
		}
		return cn;
	}

	static String trimString(final String s) {
		return s.substring(1, s.length() - 1);
	}

	final public void parse() throws ParseException {
		Debug.println("Parsing graphed format");
		jj_consume_token(GRAPH);
		graphName();
		direction();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case START_COMMENT:
			graphComment();
			break;
		default:
			jj_la1[0] = jj_gen;
			;
		}
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NUM:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_1;
			}
			parseNode();
		}
		jj_consume_token(END);
		jj_consume_token(0);
	}

	final public void parseEdge() throws ParseException {
		edgeId();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case START_COMMENT:
			edgeComment();
			break;
		default:
			jj_la1[2] = jj_gen;
			;
		}
		edgeName();
	}

	final public void parseNode() throws ParseException {
		nodeId();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case START_COMMENT:
			nodeComment();
			break;
		default:
			jj_la1[3] = jj_gen;
			;
		}
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NUM:
			case STRING:
				;
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STRING:
				nodeName();
				break;
			case NUM:
				parseEdge();
				break;
			default:
				jj_la1[5] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		jj_consume_token(21);
	}

	final public void nodeId() throws ParseException {
		Token t;
		t = jj_consume_token(NUM);
		// Debug.println("node: " + t.image);
		final long id = Long.parseLong(t.image);
		// Long ID = new Long(id);
		currentNode = getNodeForId(id);
		if (windows != null) {
			for (final Object element : windows) {
				final JJGraphicNode gn = currentNode.getGraphicNode((JJGraphWindow) element);
				if (gn != null)
					gn.getVisible().clear();
			}
		}
	}

	final public void nodeName() throws ParseException {
		Token t;
		t = jj_consume_token(STRING);
		// Debug.println("node name: " + t.image);
		currentNode.setName(trimString(t.image));
	}

	final public void edgeId() throws ParseException {
		Token t;
		t = jj_consume_token(NUM);

	}

	final public void edgeName() throws ParseException {
		Token t;
		t = jj_consume_token(STRING);

	}

	final public void graphName() throws ParseException {
		Token t;
		t = jj_consume_token(STRING);
		// Debug.println("Graph name " + t.image);
		if (graph.getName().equals("")) { // Are we just pasting???
			graph.setName(trimString(t.image));
		}
	}

	final public void direction() throws ParseException {
		Token t;
		t = jj_consume_token(DIRECTION);
		if (t.image.equals("DIRECTED")) {
			// Debug.println("Graph is directed");
			if (graph.getNumNodes() == 0) // Are we pasting ???
				graph.setDirected(true);
		} else {
			// Debug.println("Graph is undirected");
			if (graph.getNumNodes() == 0) // Are we pasting ???
				graph.setDirected(false);
		}
	}

	final public void graphComment() throws ParseException {

		jj_consume_token(START_COMMENT);
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NUM:
			case STRING:
			case WORD:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_3;
			}
			nextThing();
		}
		jj_consume_token(END_COMMENT);
	}

	final public void coordList() throws ParseException {
		label_4: while (true) {
			coordTriple();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NUM:
				;
				break;
			default:
				jj_la1[7] = jj_gen;
				break label_4;
			}
		}
	}

	final public void coordTriple() throws ParseException {
		Token xs, ys, zs;
		xs = jj_consume_token(NUM);
		ys = jj_consume_token(NUM);
		zs = jj_consume_token(NUM);
		final int x = Integer.parseInt(xs.image);
		final int y = Integer.parseInt(ys.image);
		final int z = Integer.parseInt(zs.image);
		// Debug.println("x,y,z: "+ x +","+y+","+z);
		// JJGraphicEdge ge = currentEdge.getGraphicEdge();
		// ge.addBendLast(new JJPoint(x,y,z));

	}

	final public void nodeComment() throws ParseException {

		jj_consume_token(START_COMMENT);
		label_5: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case FF_C:
			case FF_3D:
			case JJ_HIDDEN:
			case JJ_APP:
			case NP:
			case JCOLOR:
			case WORD:
				;
				break;
			default:
				jj_la1[8] = jj_gen;
				break label_5;
			}
			nodeInternal();
		}
		jj_consume_token(END_COMMENT);
	}

	final public void nodeInternal() throws ParseException {
		Token t, xs, ys, zs, rs, gs, bs;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NP:
			jj_consume_token(NP);
			xs = jj_consume_token(NUM);
			ys = jj_consume_token(NUM);
			int x = Integer.parseInt(xs.image);
			int y = Integer.parseInt(ys.image);
			if ((currentNode != null) && (windows != null)) {
				for (final Object element : windows) {
					final JJGraphWindow f = (JJGraphWindow) element;
					final JJGraphicNode gn = currentNode.getGraphicNode(f);
					if (gn != null)
						f.moveNodeTo(gn, x, y);
				}
			}
			break;
		case FF_C:
			jj_consume_token(FF_C);
			t = jj_consume_token(STRING);
			final String col = trimString(t.image);
			if (!col.startsWith("#")) {
				final Color tc = X11ColorConverter.getColor(col);
				// Debug.println("Looking up " + col +". ");

				if (tc == null) {
					Debug.println("Don't understand color " + col);
				} else {
					if (windows != null) {
						for (final Object element : windows) {
							final JJGraphicNode gn = currentNode.getGraphicNode((JJGraphWindow) element);
							gn.setColor(tc);
						}
					}
				}
			} else {
				final int red = Integer.parseInt(col.substring(1, 3), 16);
				final int green = Integer.parseInt(col.substring(3, 5), 16);
				final int blue = Integer.parseInt(col.substring(5, 7), 16);
				if (windows != null) {
					for (final Object element : windows) {
						final JJGraphicNode gn = currentNode.getGraphicNode((JJGraphWindow) element);
						gn.setColor(new Color(red, green, blue));
					}
				}
			}
			break;
		case FF_3D:
			jj_consume_token(FF_3D);
			xs = jj_consume_token(NUM);
			ys = jj_consume_token(NUM);
			zs = jj_consume_token(NUM);
			x = Integer.parseInt(xs.image);
			y = Integer.parseInt(ys.image);
			final int z = Integer.parseInt(zs.image);
			if ((currentNode != null) && (windows != null)) {
				for (final Object element : windows) {
					final JJGraphWindow f = (JJGraphWindow) element;
					final JJGraphicNode gn = currentNode.getGraphicNode(f);
					if (gn != null)
						f.moveNodeTo(gn, x, y, z);
				}
			}
			break;
		case JCOLOR:
			jj_consume_token(JCOLOR);
			rs = jj_consume_token(NUM);
			gs = jj_consume_token(NUM);
			bs = jj_consume_token(NUM);
			final int red = Integer.parseInt(rs.image);
			final int green = Integer.parseInt(gs.image);
			final int blue = Integer.parseInt(bs.image);

			if (windows != null) {
				for (final Object element : windows) {
					final JJGraphicNode gn = currentNode.getGraphicNode((JJGraphWindow) element);
					gn.setColor(new Color(red, green, blue));
				}
			}
			break;
		case JJ_HIDDEN:
			jj_consume_token(JJ_HIDDEN);
			if ((currentNode != null) && (windows != null)) {
				for (final Object element : windows) {
					final JJGraphWindow f = (JJGraphWindow) element;
					final JJGraphicNode gn = currentNode.getGraphicNode(f);
					if (gn != null)
						gn.setVisible(((JJGraphWindowImpl) f).HIDDEN, true);
				}
			}
			break;
		case JJ_APP:
			jj_consume_token(JJ_APP);
			t = jj_consume_token(STRING);
			if ((currentNode != null) && (windows != null)) {
				for (final JJGraphWindow element : windows) {
					final JJGraphWindow f = element;
					final JJGraphicNode gn = currentNode.getGraphicNode(f);
					if ((gn != null) && (gn instanceof JJGraphicNodeImpl)) {
						final JJGraphicNodeImpl gni = (JJGraphicNodeImpl) gn;

						try {
							@SuppressWarnings("unchecked")
							final Class<? extends JJGraphicNodeAppearance> appClass = (Class<? extends JJGraphicNodeAppearance>) Class
									.forName(trimString(t.image));
							final JJGraphicNodeAppearance gna = appClass.newInstance();
							gna.init(gni);
							if (gna instanceof JJGraphicNodeImage) {
								t = getNextToken();
								final String fileName = trimString(t.image);
								if (!fileName.equals("")) {
									Image image = null;
									URL url = null;

									try {
										url = new URL(fileName); // cl.findResource(fileName);

										image = Toolkit.getDefaultToolkit().createImage(url);
									} catch (final MalformedURLException me) {
										final URLClassLoader cl = (URLClassLoader) JJGraphImpl.class.getClassLoader();
										url = cl.findResource(fileName);
										image = Toolkit.getDefaultToolkit().createImage(url);
									} catch (final Exception e) {
										Debug.println("Couldn't load image: " + fileName);
									} finally {
										final JJGraphicNodeImage gnimage = (JJGraphicNodeImage) gna;
										gnimage.setImageURL(url);
										gnimage.setImage(image);
									}
								}
							}

							gni.setAppearance(gna);
						} catch (final Exception e) {
							Debug.println("Couldn't apply appearance: " + e.getMessage());
						}
					}
				}
			}
			break;
		case WORD:
			jj_consume_token(WORD);
			label_6: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NUM:
				case STRING:
					;
					break;
				default:
					jj_la1[9] = jj_gen;
					break label_6;
				}
				numberOrString();
			}
			break;
		default:
			jj_la1[10] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void edgeInternal() throws ParseException {
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case FF_C:
			t = jj_consume_token(FF_C);
			t = getNextToken();
			final String col = trimString(t.image);
			if (!col.startsWith("#")) {
				final Color tc = X11ColorConverter.getColor(col);
				// Debug.println("Looking up " + col +". ");

				if (tc == null) {
					Debug.println("Don't understand color " + col);
				} else {
					// currentEdge.setColor(tc);
				}
			} else {
				final int red = Integer.parseInt(col.substring(1, 3), 16);
				final int green = Integer.parseInt(col.substring(3, 5), 16);
				final int blue = Integer.parseInt(col.substring(5, 7), 16);

				// currentEdge.setColor(new Color(red,green,blue));
			}
			break;
		case FF_3D:
			t = jj_consume_token(FF_3D);
			jj_consume_token(NUM);
			jj_consume_token(NUM);
			jj_consume_token(NUM);
			coordList();

			break;
		case JCOLOR:
			t = jj_consume_token(JCOLOR);
			t = getNextToken();
			final int red = Integer.parseInt(t.image);
			t = getNextToken();
			final int green = Integer.parseInt(t.image);
			t = getNextToken();
			final int blue = Integer.parseInt(t.image);

			// currentEdge.setColor(new Color(red,green,blue));

			break;
		case FF_WE:
			t = jj_consume_token(FF_WE);
			t = getNextToken();
			// currentEdge.setWeight(Integer.parseInt(t.image)/100.0);

			break;
		case WORD:
			jj_consume_token(WORD);
			label_7: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NUM:
				case STRING:
					;
					break;
				default:
					jj_la1[11] = jj_gen;
					break label_7;
				}
				numberOrString();
			}
			break;
		default:
			jj_la1[12] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void edgeComment() throws ParseException {

		jj_consume_token(START_COMMENT);
		label_8: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case FF_C:
			case FF_3D:
			case JCOLOR:
			case FF_WE:
			case WORD:
				;
				break;
			default:
				jj_la1[13] = jj_gen;
				break label_8;
			}
			edgeInternal();
		}
		jj_consume_token(END_COMMENT);
	}

	final public void nextThing() throws ParseException {
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case STRING:
			t = jj_consume_token(STRING);

			break;
		case NUM:
			t = jj_consume_token(NUM);

			break;
		case WORD:
			t = jj_consume_token(WORD);

			break;
		default:
			jj_la1[14] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void numberOrString() throws ParseException {
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case STRING:
			t = jj_consume_token(STRING);

			break;
		case NUM:
			t = jj_consume_token(NUM);

			break;
		default:
			jj_la1[15] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	public GraphedAttributeParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[16];
	final private int[] jj_la1_0 = { 0x100, 0x40, 0x100, 0x100, 0xc0, 0xc0, 0x1000c0, 0x40, 0x13f000, 0xc0, 0x13f000,
			0xc0, 0x163000, 0x163000, 0x1000c0, 0xc0, };

	public GraphedAttributeParser(final java.io.InputStream stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new GraphedAttributeParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.InputStream stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	public GraphedAttributeParser(final java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new GraphedAttributeParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	public GraphedAttributeParser(final GraphedAttributeParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(final GraphedAttributeParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 16; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(final int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(final int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private final java.util.Vector<int[]> jj_expentries = new java.util.Vector<>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	final public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		final boolean[] la1tokens = new boolean[22];
		for (int i = 0; i < 22; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 16; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 22; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		final int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
